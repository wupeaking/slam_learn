/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Quaterniond_t {
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub w: f64,
}
#[test]
fn bindgen_test_layout_Quaterniond_t() {
    assert_eq!(
        ::std::mem::size_of::<Quaterniond_t>(),
        32usize,
        concat!("Size of: ", stringify!(Quaterniond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<Quaterniond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(Quaterniond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Quaterniond_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Quaterniond_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Quaterniond_t>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Quaterniond_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Quaterniond_t>())).z as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Quaterniond_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Quaterniond_t>())).w as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Quaterniond_t),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vector3d_t {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[test]
fn bindgen_test_layout_Vector3d_t() {
    assert_eq!(
        ::std::mem::size_of::<Vector3d_t>(),
        24usize,
        concat!("Size of: ", stringify!(Vector3d_t))
    );
    assert_eq!(
        ::std::mem::align_of::<Vector3d_t>(),
        8usize,
        concat!("Alignment of ", stringify!(Vector3d_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vector3d_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Vector3d_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vector3d_t>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Vector3d_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vector3d_t>())).z as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Vector3d_t),
            "::",
            stringify!(z)
        )
    );
}
extern "C" {
    pub fn example() -> ::std::os::raw::c_int;
}
